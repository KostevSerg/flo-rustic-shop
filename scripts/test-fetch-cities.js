import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const func2urlPath = path.join(__dirname, '..', 'backend', 'func2url.json');
const func2url = JSON.parse(fs.readFileSync(func2urlPath, 'utf8'));
const CITIES_API_URL = func2url.cities;

function generateSlug(cityName) {
  return cityName
    .toLowerCase()
    .replace(/—ë/g, 'e')
    .replace(/ /g, '-')
    .replace(/–∞/g, 'a').replace(/–±/g, 'b').replace(/–≤/g, 'v').replace(/–≥/g, 'g')
    .replace(/–¥/g, 'd').replace(/–µ/g, 'e').replace(/–∂/g, 'zh').replace(/–∑/g, 'z')
    .replace(/–∏/g, 'i').replace(/–π/g, 'j').replace(/–∫/g, 'k').replace(/–ª/g, 'l')
    .replace(/–º/g, 'm').replace(/–Ω/g, 'n').replace(/–æ/g, 'o').replace(/–ø/g, 'p')
    .replace(/—Ä/g, 'r').replace(/—Å/g, 's').replace(/—Ç/g, 't').replace(/—É/g, 'u')
    .replace(/—Ñ/g, 'f').replace(/—Ö/g, 'h').replace(/—Ü/g, 'c').replace(/—á/g, 'ch')
    .replace(/—à/g, 'sh').replace(/—â/g, 'sch').replace(/—ä/g, '').replace(/—ã/g, 'y')
    .replace(/—å/g, '').replace(/—ç/g, 'e').replace(/—é/g, 'yu').replace(/—è/g, 'ya');
}

async function testFetch() {
  console.log('üß™ Testing city fetch...\n');
  console.log(`üì° API URL: ${CITIES_API_URL}\n`);
  
  const response = await fetch(CITIES_API_URL);
  const data = await response.json();
  
  let allCities = [];
  if (data.cities && typeof data.cities === 'object') {
    Object.keys(data.cities).forEach(regionName => {
      const citiesInRegion = data.cities[regionName];
      if (Array.isArray(citiesInRegion)) {
        allCities = allCities.concat(citiesInRegion);
      }
    });
  }
  
  const citiesWithSlugs = allCities.map(city => ({
    slug: generateSlug(city.name),
    name: city.name
  }));
  
  console.log(`‚úÖ Found ${citiesWithSlugs.length} cities\n`);
  console.log('üìã Preview (first 10):');
  console.log('='.repeat(60));
  citiesWithSlugs.slice(0, 10).forEach((city, i) => {
    console.log(`${i+1}. ${city.name} ‚Üí /city/${city.slug}/`);
  });
  console.log('='.repeat(60));
  console.log(`\n... and ${citiesWithSlugs.length - 10} more cities`);
  
  console.log('\nüìÑ Example meta tags for –í–æ–ª–≥–æ–≥—Ä–∞–¥:');
  console.log('='.repeat(60));
  const exampleCity = citiesWithSlugs.find(c => c.name === '–í–æ–ª–≥–æ–≥—Ä–∞–¥') || citiesWithSlugs[0];
  const title = `–î–æ—Å—Ç–∞–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤ ${exampleCity.name} ‚Äî FloRustic | –ë—É–∫–µ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ ${exampleCity.name}`;
  const description = `–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤ ${exampleCity.name}. –°–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã –≤ ${exampleCity.name} ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.`;
  console.log(`<title>${title}</title>`);
  console.log(`<meta name="description" content="${description}">`);
  console.log(`<link rel="canonical" href="https://florustic.ru/city/${exampleCity.slug}">`);
  console.log('='.repeat(60));
}

testFetch().catch(console.error);
